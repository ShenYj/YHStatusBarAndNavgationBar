
Main 文件夹以及 AppDelegate
1> 状态栏前景颜色改变, 以及部分问题说明
    查看 AppDelegate.m 中的说明, 根据说明再查看
2> 每次 push 压栈的时候不需要再设置 hidesBottomBarWhenPushed = YES
    实现方法,查看 YHNavgationController.m 中的解决方法和说明


One 文件夹
3> 滚动的时候,隐藏导航栏和底部工具栏并且带有动画效果,解决办法以及实际应用中的部分分析说明
    实现方法查看看文件夹 One中的  OtherViewController.m


Two 文件夹
4> 设置导航栏状态栏背景颜色为空,并且滚动的时候背景颜色渐变效果
5> 设置滚动的时候状态栏前景颜色随着滚动发生变化的效果
-->如果要导航栏前景颜色也随滚动发生变化,那么添加的items最好都是自定义的,以便达到改变条件的时候好拿出来设置

问题: 当导航栏push到下一个控制器的时候,pop返回不了,只能边缘拖拽返回,返回之后 push 功能也失效了
解决办法: 利用视图生命周期方法,当要push的时候,在视图将要消失的方法内删除添加的导航栏和状态栏的背景视图,在视图将要出现的方法内添加导航栏和状态栏的背景视图
产生上述问题原因: 当 push 到下一级控制器的时候,添加的背景视图还在导航栏上,导航栏只有一个,每一个压栈的控制器都有同一个导航控制器的属性,导航控制器的又只有一个导航栏属性,,而上一级添加的背景视图只是上一级控制器的属性,不具备全局性,当前控制器找不到,而且添加的时候又是插入导航栏最底部,所以点击返回时响应者链条被打断了


Three 文件夹
6> 主要是对文件夹Two 中的功能做了一定的封装,可能也存在问题


Four 文件夹
一 自定义导航条
    1> 首先重写一个子类文件,继承自 UINavigationController 并且在视图加载完成的时候执行    self.navigationBar.hidden = YES;

    2> 定义一个基类控制器继承 UIViewController,
然后在这个控制器中添加一个导航条, 并且将导航条作为全局属性
UINavigationBar *navBar = [[UINavigationBar alloc] initWithFrame:CGRectMake(0, 0, [UIScreen mainScreen].bounds.size.width, 64)];
[self.view addSubview:navBar];
navBar.barTintColor = [UIColor orangeColor];
navBar.tintColor = [UIColor whiteColor];
_navgationBar = navBar;
如果要在这个导航条上面添加一个一个公共的返回按钮,那就在这个基类里面的添加的导航条左侧添加一个按钮即可
UIButton *backButton = [[UIButton alloc] initWithFrame:CGRectMake(10, 15, 24, 40)];
[backButton setTitle:@"返回" forState:UIControlStateNormal];
[backButton sizeToFit];
[backButton addTarget:self action:@selector(backClick) forControlEvents:UIControlEventTouchUpInside];
[backButton setTitleColor:[UIColor redColor] forState:UIControlStateNormal];
[self.navgationBar addSubview:backButton];

- (void)backClick {
[self.navigationController popViewControllerAnimated:YES];
}

    3> 其他控制器只需要继承这个基类控制器即可,
A) 如果某个控制器中需要使用系统的导航条,
那么我们只需要在这个控制器中做处理即可,隐藏自定义的导航条,显示系统导航控制器自己的导航条
(但是这种情况下一般会产生问题,当边缘拖拽返回时,导航条显示与隐藏的问题)
解决办法:  不使用系统导航条,再重新自定义一个基类控制器,基类控制器中添加新的自定义导航条,需要这种导航条的控制器只需要继承即可

    4>好处 根据OC的三大特性中的继承和多态, 只要在基类控制器中左侧添加一个返回箭头按钮,并且实现功能,中间添加一个label标签作为 Title ,在各个子类控制器中设置的导航条的背景颜色 和 Title 互不影响,,,,
如果其他子类控制器需要其他样式的导航条,可以再在相应的子类控制器文件中添加即可,如果这种样式用的多可以重新写一个基类控制器,自定义对应样式的导航条

二 不自定义导航条,直接使用系统导航条,导航条隐藏方法与左侧拖拽返回的关系
[self.navigationController setNavigationBarHidden:NO animated:YES];
self.navigationController.navigationBarHidden = NO;
self.navigationController.navigationBar.hidden = NO;
1> 前两种方法隐藏导航条的时候, 只有 在当前控制器没有隐藏导航条,不管上一级控制器隐藏与否,都支持当前控制器的左侧拖拽返回.
2> 第三种方式不管上一级控制器或者还是当前控制器是否隐藏导航条,都支持左侧拖拽返回
3> 第一种和后两种的区别是, 如果上一级控制器隐藏了导航条,当前控制器没有隐藏导航条,左侧拖拽返回的时候,第一种方法不会产生刚一拖动导航条就向上消失的情况,
4> 以上三种方法在测试的时候,当当前系统导航栏没有隐藏的情况下,只要设置了self.navigationItem.leftBarButtonItem , 左侧拖拽返回功能就没有了
5> 特别说明,  当不定义导航条,使用系统的导航条的时候, 如果存在UITabBarController 也遵守以上四条

三  总结
[self.navigationController setNavigationBarHidden:NO/YES animated:YES];
self.navigationController.navigationBarHidden = NO/YES;
self.navigationController.navigationBar.hidden = NO/YES;
1> 如果是全部使用自定义的导航条,系统的导航条都隐藏了,只有第三种方式支持拖拽返回手势
2> 如果当前控制器的系统导航条没有隐藏,不管上一级控制器系统导航条隐藏与否,三种方法都支持拖拽返回
3> 如果当前控制器导航条是系统的,上一级是隐藏的,第一种拖拽返回的时候不会出现导航条不会产生刚一拖动导航条就向上消失的情况,另外两种会产生这种情况







